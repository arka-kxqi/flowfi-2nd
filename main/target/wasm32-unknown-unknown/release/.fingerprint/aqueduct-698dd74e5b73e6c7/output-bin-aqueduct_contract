{"message":"expected `;`, found keyword `let`","code":null,"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":50643,"byte_end":50646,"line_start":1137,"line_end":1137,"column_start":21,"column_end":24,"is_primary":false,"text":[{"text":"                    let log = self.call_application(Self::logger_id()?, call);","highlight_start":21,"highlight_end":24}],"label":"unexpected token","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src/contract.rs","byte_start":50622,"byte_end":50622,"line_start":1136,"line_end":1136,"column_start":22,"column_end":22,"is_primary":true,"text":[{"text":"                    }","highlight_start":22,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add `;` here","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":50622,"byte_end":50622,"line_start":1136,"line_end":1136,"column_start":22,"column_end":22,"is_primary":true,"text":[{"text":"                    }","highlight_start":22,"highlight_end":22}],"label":null,"suggested_replacement":";","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: expected `;`, found keyword `let`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:1136:22\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    }\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: add `;` here\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                    let log = self.call_application(Self::logger_id()?, call);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m---\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12munexpected token\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared crate or module `chrono`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":504,"byte_end":510,"line_start":18,"line_end":18,"column_start":5,"column_end":11,"is_primary":true,"text":[{"text":"use chrono::prelude::Utc;","highlight_start":5,"highlight_end":11}],"label":"use of undeclared crate or module `chrono`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `chrono`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:18:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse chrono::prelude::Utc;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `chrono`\u001b[0m\n\n"}
{"message":"unresolved import `aqueduct::Error`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/state.rs","byte_start":217,"byte_end":222,"line_start":4,"line_end":4,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"use aqueduct::{TokenId, Token, StreamId, Stream, Error};","highlight_start":50,"highlight_end":55}],"label":"no `Error` in the root","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items instead:\nasync_graphql::Error\nbcs::Error\ncrate::Error\nfutures::io::Error\nlog::Level::Error\nlog::LevelFilter::Error\nserde::__private::doc::Error\nserde::__private::fmt::Error\nserde::de::Error\nserde::de::value::Error\nserde::ser::Error\nserde_json::Error\nstd::error::Error\nstd::fmt::Error\nstd::io::Error\nuuid::Error\ncore::error::Error\ncore::fmt::Error","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `aqueduct::Error`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/state.rs:4:50\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m4\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse aqueduct::{TokenId, Token, StreamId, Stream, Error};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mno `Error` in the root\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: consider importing one of these items instead:\u001b[0m\n\u001b[0m          async_graphql::Error\u001b[0m\n\u001b[0m          bcs::Error\u001b[0m\n\u001b[0m          crate::Error\u001b[0m\n\u001b[0m          futures::io::Error\u001b[0m\n\u001b[0m          log::Level::Error\u001b[0m\n\u001b[0m          log::LevelFilter::Error\u001b[0m\n\u001b[0m          serde::__private::doc::Error\u001b[0m\n\u001b[0m          serde::__private::fmt::Error\u001b[0m\n\u001b[0m          serde::de::Error\u001b[0m\n\u001b[0m          serde::de::value::Error\u001b[0m\n\u001b[0m          serde::ser::Error\u001b[0m\n\u001b[0m          serde_json::Error\u001b[0m\n\u001b[0m          std::error::Error\u001b[0m\n\u001b[0m          std::fmt::Error\u001b[0m\n\u001b[0m          std::io::Error\u001b[0m\n\u001b[0m          uuid::Error\u001b[0m\n\u001b[0m          core::error::Error\u001b[0m\n\u001b[0m          core::fmt::Error\u001b[0m\n\n"}
{"message":"cannot find type `AccountOwner` in this scope","code":{"code":"E0412","explanation":"A used type name is not in scope.\n\nErroneous code examples:\n\n```compile_fail,E0412\nimpl Something {} // error: type name `Something` is not in scope\n\n// or:\n\ntrait Foo {\n    fn bar(N); // error: type name `N` is not in scope\n}\n\n// or:\n\nfn foo(x: T) {} // type name `T` is not in scope\n```\n\nTo fix this error, please verify you didn't misspell the type name, you did\ndeclare it or imported it into the scope. Examples:\n\n```\nstruct Something;\n\nimpl Something {} // ok!\n\n// or:\n\ntrait Foo {\n    type N;\n\n    fn bar(_: Self::N); // ok!\n}\n\n// or:\n\nfn foo<T>(x: T) {} // ok!\n```\n\nAnother case that causes this error is when a type is imported into a parent\nmodule. To fix this, you can follow the suggestion and use File directly or\n`use super::File;` which will import the types from the parent namespace. An\nexample that causes this error is below:\n\n```compile_fail,E0412\nuse std::fs::File;\n\nmod foo {\n    fn some_function(f: File) {}\n}\n```\n\n```\nuse std::fs::File;\n\nmod foo {\n    // either\n    use super::File;\n    // or\n    // use std::fs::File;\n    fn foo(f: File) {}\n}\n# fn main() {} // don't insert it for us; that'll break imports\n```\n"},"level":"error","spans":[{"file_name":"src/state.rs","byte_start":650,"byte_end":662,"line_start":18,"line_end":18,"column_start":50,"column_end":62,"is_primary":true,"text":[{"text":"    pub(crate) async fn balance(&self, account: &AccountOwner) -> Amount {","highlight_start":50,"highlight_end":62}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0412]\u001b[0m\u001b[0m\u001b[1m: cannot find type `AccountOwner` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/state.rs:18:50\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m18\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    pub(crate) async fn balance(&self, account: &AccountOwner) -> Amount {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":48375,"byte_end":48386,"line_start":1087,"line_end":1087,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use the fully-qualified path","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":48375,"byte_end":48386,"line_start":1087,"line_end":1087,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Aqueduct as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":48375,"byte_end":48386,"line_start":1087,"line_end":1087,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Aqueduct as TryFuture>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":48375,"byte_end":48386,"line_start":1087,"line_end":1087,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Aqueduct as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":48375,"byte_end":48386,"line_start":1087,"line_end":1087,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Aqueduct as TryStream>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":48375,"byte_end":48386,"line_start":1087,"line_end":1087,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Aqueduct as linera_sdk::Contract>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:1087:72\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, Self::Error> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the fully-qualified path\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryFuture>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1087\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn get_price(&mut self, token_id: TokenId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryStream>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m       and 1 other candidate\u001b[0m\n\n"}
{"message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"src/contract.rs","byte_start":49413,"byte_end":49424,"line_start":1114,"line_end":1114,"column_start":97,"column_end":108,"is_primary":true,"text":[{"text":"    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {","highlight_start":97,"highlight_end":108}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use the fully-qualified path","code":null,"level":"help","spans":[{"file_name":"src/contract.rs","byte_start":49413,"byte_end":49424,"line_start":1114,"line_end":1114,"column_start":97,"column_end":108,"is_primary":true,"text":[{"text":"    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {","highlight_start":97,"highlight_end":108}],"label":null,"suggested_replacement":"<Aqueduct as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":49413,"byte_end":49424,"line_start":1114,"line_end":1114,"column_start":97,"column_end":108,"is_primary":true,"text":[{"text":"    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {","highlight_start":97,"highlight_end":108}],"label":null,"suggested_replacement":"<Aqueduct as TryFuture>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":49413,"byte_end":49424,"line_start":1114,"line_end":1114,"column_start":97,"column_end":108,"is_primary":true,"text":[{"text":"    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {","highlight_start":97,"highlight_end":108}],"label":null,"suggested_replacement":"<Aqueduct as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":49413,"byte_end":49424,"line_start":1114,"line_end":1114,"column_start":97,"column_end":108,"is_primary":true,"text":[{"text":"    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {","highlight_start":97,"highlight_end":108}],"label":null,"suggested_replacement":"<Aqueduct as TryStream>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/contract.rs","byte_start":49413,"byte_end":49424,"line_start":1114,"line_end":1114,"column_start":97,"column_end":108,"is_primary":true,"text":[{"text":"    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {","highlight_start":97,"highlight_end":108}],"label":null,"suggested_replacement":"<Aqueduct as linera_sdk::Contract>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m: ambiguous associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/contract.rs:1114:97\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, Self::Error> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use the fully-qualified path\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryFuture>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1114\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    async fn handle_receive(&mut self, stream_id_string: String, to: ChainId) -> Result<Amount, \u001b[0m\u001b[0m\u001b[38;5;10m<Aqueduct as TryStream>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m       and 1 other candidate\u001b[0m\n\n"}
{"message":"aborting due to 6 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 6 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0223, E0412, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0223, E0412, E0432, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0223`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0223`.\u001b[0m\n"}
